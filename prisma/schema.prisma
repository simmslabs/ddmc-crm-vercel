generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  balance     Int
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
}

model accounts_invoices {
  id         Int       @id @default(autoincrement())
  account_id Int
  invoice_id Int
  created_at DateTime?
  updated_at DateTime
  deleted_at DateTime?

  @@index([account_id], map: "account_id")
  @@index([invoice_id], map: "invoice_id")
}

model brand_images {
  id          Int       @id @default(autoincrement())
  image       String
  created_at  DateTime?
  modified_at DateTime
  deleted_at  DateTime?
  brand_id    Int
  brand       brands    @relation(fields: [brand_id], references: [id])
}

model brands {
  id           Int            @id @default(autoincrement())
  name         String
  employee     Int?
  slug         String
  created_at   DateTime?
  modified_at  DateTime
  brand_images brand_images[]
  inventories  inventories[]
}

model categories {
  id                 Int              @id @default(autoincrement())
  title              String
  slug               String?
  parent_id          Int?
  created_at         DateTime?
  modified_at        DateTime
  category_images_id Int?
  category_images    category_images? @relation(fields: [category_images_id], references: [id])
  inventories        inventories[]
}

model category_images {
  id          Int          @id @default(autoincrement())
  category_id Int?
  image       String
  created_at  DateTime?
  modified_at DateTime
  categories  categories[]
}

model customers {
  id         Int        @id @default(autoincrement())
  name       String     @unique(map: "customers_name_unique")
  address    String?
  email      String
  phone      String
  employee   Int
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  invoices   invoices[]
  projects   projects[]
}

model departments {
  id         Int         @id @default(autoincrement())
  title      String      @unique(map: "departments_title_unique")
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  employees  employees[]
}

model employee_positions {
  id         Int         @id @default(autoincrement())
  title      String      @unique(map: "employee_positions_title_unique")
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  employees  employees[]
}

model employees {
  id                   Int                 @id @default(autoincrement())
  name                 String
  address              String?
  email                String              @unique(map: "employees_email_unique")
  phone                String
  salary               String
  password             String
  created_at           DateTime?
  updated_at           DateTime?
  deleted_at           DateTime?
  employee_status      employee_status     @default(active)
  employee_positionsId Int?
  departmentsId        Int?
  role_id              Int?
  department           departments?        @relation(fields: [departmentsId], references: [id])
  position             employee_positions? @relation(fields: [employee_positionsId], references: [id])
  role                 roles?              @relation(fields: [role_id], references: [id])
  invoices             invoices[]
}

model failed_jobs {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime
}

model images {
  id             Int          @id @default(autoincrement())
  description    String?
  image          String
  created_at     DateTime?
  modified_at    DateTime
  inventories_id Int?         @db.UnsignedInt
  inventory      inventories?
}

model inventories {
  id                    Int         @id @default(autoincrement()) @db.UnsignedInt
  title                 String
  slug                  String
  code                  String?
  unit_name             String?
  purchase_price        Int?
  sales_price           Int?
  description           String?     @db.MediumText
  inventory_location_id Int?
  quantity              Int?        @default(1)
  deleted_at            DateTime?
  created_at            DateTime?
  updated_at            DateTime?
  categoriesId          Int?
  brandsId              Int?
  show_in_shop          Boolean?    @default(false)
  imagesId              Int?        @unique
  brand                 brands?     @relation(fields: [brandsId], references: [id])
  category              categories? @relation(fields: [categoriesId], references: [id])
  images                images?     @relation(fields: [imagesId], references: [id])
}

model inventory_locations {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @unique(map: "inventory_locations_name_unique")
  employee   Int
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
}

model invoice_items {
  id            Int                 @id @default(autoincrement())
  invoice_id    Int
  inventory_id  Int?
  media_type_id Int?
  media_size_id Int?
  description   String?             @db.MediumText
  size          String?
  quantity      Int
  price         Int?
  amount        Int?
  deleted_at    DateTime?
  created_at    DateTime?
  updated_at    DateTime?
  discount      Int?
  discount_type String?
  deleted       Boolean?            @default(false)
  type          invoice_items_type? @default(sale)
  invoices      invoices            @relation(fields: [invoice_id], references: [id])
}

model invoice_prefixes {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  prefix     String    @unique(map: "invoice_prefixes_prefix_unique")
  created_at DateTime?
  updated_at DateTime?
}

model invoice_statuses {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  title      String    @unique(map: "invoice_statuses_title_unique")
  color      String
  created_at DateTime?
  updated_at DateTime?
}

model invoices {
  id            Int              @id @default(autoincrement())
  invoice_num   String?
  invoice_date  DateTime         @db.Date
  invoice_due   DateTime         @db.Date
  order_num     String?
  quote_num     String?
  customer_id   Int?
  user_id       Int
  total_amount  Int?
  deleted_at    DateTime?
  created_at    DateTime?
  updated_at    DateTime?
  tax           Int
  tax_type      String?
  deleted       Boolean?         @default(false)
  type          invoices_type?   @default(sale)
  supplier_id   Int?
  status        invoices_status? @default(paid)
  account_id    Int?
  usersId       Int?             @db.UnsignedInt
  customer      customers?       @relation(fields: [customer_id], references: [id])
  user          employees        @relation(fields: [user_id], references: [id])
  supplier      suppliers?       @relation(fields: [supplier_id], references: [id])
  invoice_items invoice_items[]
  receipts      receipts[]

  projects projects[]
  @@index([account_id], map: "account_id")
  @@index([supplier_id], map: "supplier_id")
}

model job_order_items {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  file_name        String
  quantity         Int
  size             String
  media_type       String
  finish_styling   String
  job_order_number String
  created_at       DateTime?
  updated_at       DateTime?
}

model job_orders {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  order_date   String
  due_date     String
  order_number String
  customer_id  Int       @db.UnsignedInt
  employee_id  Int       @db.UnsignedInt
  created_at   DateTime?
  updated_at   DateTime?
}

model media_types {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  title      String
  created_at DateTime?
  updated_at DateTime?
}

model media_sizes {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  title      String
  created_at DateTime?
  updated_at DateTime?
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model model_has_permissions {
  permission_id Int
  model_type    String @db.VarChar(125)
  model_id      Int

  @@id([permission_id, model_id, model_type])
}

model model_has_roles {
  role_id    Int
  model_type String @db.VarChar(125)
  model_id   Int

  @@id([role_id, model_id, model_type])
}

model none_inventories {
  id             Int       @id @default(autoincrement())
  title          String
  code           String
  unit_name      String
  purchase_price Int?      @default(0)
  sales_price    Int?      @default(0)
  description    String    @db.MediumText
  deleted_at     DateTime?
  deleted        Int?
  created_at     DateTime?
  updated_at     DateTime?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime?

  @@ignore
}

model permissions {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(125)
  guard_name           String                 @db.VarChar(125)
  created_at           DateTime?
  updated_at           DateTime?
  role_has_permissions role_has_permissions[]
}

model personal_access_tokens {
  id             Int       @id @default(autoincrement())
  tokenable_type String
  tokenable_id   Int
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime?
  created_at     DateTime?
  updated_at     DateTime?
}

model products_services {
  id          Int     @id @default(autoincrement())
  title       String? @db.VarChar(255)
  parent_id   Int?
  description String? @db.VarChar(255)
  href        String? @db.VarChar(255)
}

model project_categories {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  title      String     @unique(map: "project_categories_title_unique")
  created_at DateTime?
  updated_at DateTime?
  projects   projects[]
}

model project_milestones {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  title      String    @unique(map: "project_milestones_title_unique")
  created_at DateTime?
  updated_at DateTime?
}

model project_tasks {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  task_title  String
  project_id  Int?      @db.UnsignedInt
  start_date  DateTime?
  due_date    DateTime?
  employee_id Int       @db.UnsignedInt
  note        String?   @db.MediumText
  comment     String?   @db.MediumText
  created_at  DateTime?
  updated_at  DateTime?
  projects    projects? @relation(fields: [project_id], references: [id])
}

model project_timesheets {
  id                  Int       @id @default(autoincrement()) @db.UnsignedInt
  project_id          Int       @db.UnsignedInt
  project_task_id     Int       @db.UnsignedInt
  start_date          String
  start_time          String
  due_date            String
  due_time            String
  note                String    @db.MediumText
  comment             String    @db.MediumText
  timesheet_status_id Int       @db.UnsignedInt
  employee_id         Int       @db.UnsignedInt
  created_at          DateTime?
  updated_at          DateTime?
  projectsId          Int       @db.UnsignedInt
}

model projects {
  id                  Int                 @id @default(autoincrement()) @db.UnsignedInt
  project_title       String
  project_category_id Int                 @db.UnsignedInt
  start_date          String
  due_date            String
  customer_id         Int?                @db.UnsignedInt
  note                String              @db.MediumText
  comment             String              @db.MediumText
  created_at          DateTime?
  updated_at          DateTime?
  status              project_status      @default(stopped)
  invoice_id          Int?
  customer            customers?          @relation(fields: [customer_id], references: [id])
  invoice             invoices?           @relation(fields: [invoice_id], references: [id])
  category            project_categories? @relation(fields: [project_category_id], references: [id])
  tasks               project_tasks[]
}

model purchase_invoices {
  id           Int                     @id @default(autoincrement())
  invoice_num  String                  @unique(map: "invoices_invoice_num_unique")
  invoice_date DateTime                @db.Date
  invoice_due  DateTime                @db.Date
  order_num    String?
  quote_num    String?
  customer_id  Int
  user_id      Int
  total_amount Decimal?                @db.Decimal(8, 2)
  deleted_at   DateTime?
  created_at   DateTime?
  updated_at   DateTime?
  tax          Int
  tax_type     String?
  deleted      Boolean?                @default(false)
  type         purchase_invoices_type? @default(sale)
}

model receipts {
  id          Int       @id @default(autoincrement())
  user_id     Int
  invoice_id  Int
  amount      Int
  description String?   @db.Text
  deleted     Boolean?  @default(false)
  created_at  DateTime?
  deleted_at  DateTime?
  updated_at  DateTime?
  account_id  Int?

  // invoice invoices? @relation(fields: [account_id], references: [id])
  // invoices   invoices? @relation(fields: [invoicesId], references: [id])
  invoice invoices @relation(fields: [invoice_id], references: [id])
  @@index([account_id], map: "account_id")
  @@index([invoice_id], map: "invoice_id")
}

model role_has_permissions {
  permission_id Int
  role_id       Int

  roles      roles?       @relation(fields: [role_id], references: [id])
  permission permissions? @relation(fields: [permission_id], references: [id])
  @@id([permission_id, role_id])
}

model roles {
  id               Int                    @id @default(autoincrement())
  name             String                 @db.VarChar(125)
  guard_name       String                 @db.VarChar(125)
  created_at       DateTime?
  updated_at       DateTime?
  employees        employees[]
  role_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model suppliers {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  name       String
  address    String?
  email      String
  phone      String
  employee   Int
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  invoices   invoices[]
}

model timesheet_statuses {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  title      String    @unique(map: "timesheet_statuses_title_unique")
  color      String
  created_at DateTime?
  updated_at DateTime?
}

model transfer_inventories {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  date        String
  reference   String?
  from        Int       @db.UnsignedInt
  to          Int       @db.UnsignedInt
  description String    @db.MediumText
  deleted_at  DateTime?
  deleted     Int?
  created_at  DateTime?
  updated_at  DateTime?
}

model transfer_items {
  id                    Int       @id @default(autoincrement()) @db.UnsignedInt
  transfer_inventory_id Int       @db.UnsignedInt
  inventory_id          Int       @db.UnsignedInt
  item_description      String    @db.MediumText
  quantity              Int
  created_at            DateTime?
  updated_at            DateTime?
}

model users {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  name              String
  email             String    @unique(map: "users_email_unique")
  email_verified_at DateTime?
  password          String
  role              String
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime?
  updated_at        DateTime?
}

enum project_status {
  ongoing
  stopped
  completed
}

enum employee_status {
  active
  inactive
}

enum invoice_items_type {
  sale
  purchase
  quote
}

enum invoices_type {
  sale
  purchase
  quote
}

enum invoices_status {
  paid
  pending
  denied
}

enum purchase_invoices_type {
  sale
  purchase
}
